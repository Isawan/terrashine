use std::hash::{DefaultHasher, Hash, Hasher};
use std::{fs, io, path::Path, process::Command};

/// Copy files from source to destination recursively.
pub fn copy_recursively(source: impl AsRef<Path>, destination: impl AsRef<Path>) -> io::Result<()> {
    fs::create_dir_all(&destination)?;
    for entry in fs::read_dir(source)? {
        let entry = entry?;
        let filetype = entry.file_type()?;
        if filetype.is_dir() {
            copy_recursively(entry.path(), destination.as_ref().join(entry.file_name()))?;
        } else {
            fs::copy(entry.path(), destination.as_ref().join(entry.file_name()))?;
        }
    }
    Ok(())
}

pub fn generate_tailwind() -> io::Result<(String, String)> {
    let out_dir = std::env::var("OUT_DIR").unwrap();
    let css_path = format!("{}/tailwind.css", &out_dir);
    let output = Command::new("tailwindcss")
        .args([
            "--input",
            "style.css",
            "--output",
            &css_path,
            "--minify",
            "--cwd=resources/ui",
        ])
        .output()?;

    if !output.status.success() {
        eprintln!(
            "Tailwind CSS generation failed: {}",
            String::from_utf8_lossy(&output.stderr)
        );
        return Err(io::Error::new(
            io::ErrorKind::Other,
            "Tailwind CSS generation failed",
        ));
    }

    // Save the generated CSS file with hash
    let mut hasher = DefaultHasher::new();
    fs::read_to_string(&css_path)?.hash(&mut hasher);
    let hash = hasher.finish();
    let filename = format!("tailwind-{}.css", hash);

    let ui_dir = format!("{}/ui", &out_dir);
    fs::create_dir_all(&ui_dir)?;

    // let rustc know about the generated file as an environment variable
    Ok((filename, css_path))
}

// generated by `sqlx migrate build-script`
fn main() {
    // trigger recompilation when a new migration is added
    println!("cargo:rerun-if-changed=migrations");
    println!("cargo:rerun-if-changed=resources/ui");

    // let rustc know about the generated file as an environment variable
    let (filename, css_path) = generate_tailwind().expect("Error generating Tailwind CSS");
    println!("cargo:rustc-env=TAILWIND_CSS_NAME={}", filename);
    println!("cargo:rustc-env=TAILWIND_CSS_PATH={}", css_path);
}
